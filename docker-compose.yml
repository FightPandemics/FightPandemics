version: "3"
services:
  mongo:
    image: mongo
    container_name: mongo
    environment:
      MONGO_INITDB_DATABASE: fightpandemics
    restart: always
    networks:
      - fp_network

  mongo-express:
    image: mongo-express
    container_name: mongo-express
    restart: always
    ports:
      - "8081:8081"
    networks:
      - fp_network
    depends_on:
      - mongo

  backend-service:
    build:
      context: backend
      dockerfile: Dockerfile.dev
      args:
        NODE_ENV: dev
    container_name: backend-service
    restart: always
    ports:
      - "8000:8000"
      - "9229:9229"
    volumes:
      - ./backend:/app
      - /app/node_modules/
    working_dir: /app
    depends_on:
      - mongo
    networks:
      - fp_network

  client:
    build:
      context: client
      dockerfile: Dockerfile.dev
    restart: always
    container_name: client
    environment:
      BACKEND_SERVICE_URL: http://backend-service:8000
    ports:
      - "3000:3000"
    volumes:
      - ./client:/app
      - /app/node_modules/
    working_dir: /app
    stdin_open: true
    tty: true
    networks:
      - fp_network

  cypress-e2e:
    build: 
      context: cypresse2e
      dockerfile: Dockerfile
    container_name: cypress-e2e
    depends_on:
      - client
    environment:
      - CYPRESS_baseUrl=http://client:3000
    command: dockerize -wait http://client:3000 -timeout 300s npx cypress run
    volumes:
      - ./cypresse2e/cypress:/app/cypress
      - ./cypresse2e/cypress.json:/app/cypress.json
    working_dir: /app
    networks:
      - fp_network

  mocha-integration:
    build: 
      context: mocha
      dockerfile: Dockerfile
    container_name: mocha-integration
    depends_on:
      - client
    environment:
      MOCHA_URL: http://backend-service:8000
    command: dockerize -wait http://client:3000 -timeout 300s npm run test 
    volumes:
      - ./mocha/test/:/app/test/
    working_dir: /app
    networks:
      - fp_network

networks:
  fp_network:
    driver: bridge
