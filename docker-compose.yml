version: "3"
services:
  mongo:
    image: mongo
    container_name: mongo
    environment:
      MONGO_INITDB_DATABASE: fightpandemics
    restart: always
    ports:
      - "27017:27017"
    networks:
      - fp_network

  mongo-express:
    image: mongo-express
    container_name: mongo-express
    restart: always
    ports:
      - "8081:8081"
    networks:
      - fp_network
    depends_on:
      - mongo

  backend-service:
    build:
      context: backend
      dockerfile: Dockerfile.dev
      args:
        NODE_ENV: dev
    container_name: backend-service
    restart: always
    ports:
      - "8000:8000"
      - "9229:9229"
    volumes:
      - ./backend:/app
      - /app/node_modules/
    working_dir: /app
    depends_on:
      - mongo
      - redis
    networks:
      - fp_network

  client:
    build:
      context: client
      dockerfile: Dockerfile.dev
    restart: always
    container_name: client
    environment:
      BACKEND_SERVICE_URL: http://backend-service:8000
    ports:
      - "3000:3000"
    volumes:
      - ./client:/app
      - /app/node_modules/
    working_dir: /app
    stdin_open: true
    tty: true
    networks:
      - fp_network

  cypress-e2e-tests:
    build:
      context: cypresse2e
      dockerfile: Dockerfile
    container_name: cypress-e2e-tests
    depends_on:
      - client
    environment:
      - CYPRESS_baseUrl=http://client:3000
    entrypoint: ""
    command:
      [
        "dockerize",
        "-wait",
        "http://client:3000",
        "-timeout",
        "300s",
        "bash",
        "-c",
        "npm run test",
      ]
    volumes:
      - ./cypresse2e/mochawesome-report/:/app/mochawesome-report/
      - ./cypresse2e/cypress:/app/cypress
      - ./cypresse2e/cypress.json:/app/cypress.json
    working_dir: /app
    networks:
      - fp_network

  cypress-e2e-report:
    build:
      context: cypresse2e
      dockerfile: Dockerfile
    container_name: cypress-e2e-report
    entrypoint: ""
    command: ["bash", "-c", "npm run report"]
    volumes:
      - ./cypresse2e/mochawesome-report/:/app/mochawesome-report/
      - ./cypresse2e/cypress:/app/cypress
      - ./cypresse2e/cypress.json:/app/cypress.json
    working_dir: /app

  mocha-integration:
    build:
      context: mocha
      dockerfile: Dockerfile
    container_name: mocha-integration
    depends_on:
      - client
    environment:
      MOCHA_URL: http://backend-service:8000
    command: dockerize -wait http://client:3000 -timeout 300s npm run test
    volumes:
      - ./mocha/test/:/app/test/
      - ./mocha/utils/:/app/utils/
    working_dir: /app
    networks:
      - fp_network

  awscli:
    image: mesosphere/aws-cli
    environment:
      AWS_ACCESS_KEY_ID: dummy_id
      AWS_SECRET_ACCESS_KEY: dummy_key
      AWS_DEFAULT_REGION: us-east-1
    networks:
      - fp_network

  localstack:
    image: localstack/localstack
    container_name: localstack
    ports:
      - "4566:4566"
    environment:
      SERVICES: s3
      HOSTNAME: localstack
      DOCKER_HOST: unix:///var/run/docker.sock
      DATA_DIR: /tmp/localstack/data
      DEBUG: 1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./localstack:/docker-entrypoint-initaws.d
    networks:
      - fp_network

  redis:
    image: redis:alpine
    container_name: redis
    restart: always
    ports:
      - "26379:6379"
    volumes:
      - redis-volume:/data
    networks:
      - fp_network

networks:
  fp_network:
    driver: bridge

volumes:
  redis-volume:
